#!/usr/bin/env ruby

require 'date'
require 'optparse'
require 'pathname'
require 'fileutils'

def ensure_folder_exists(folder_path)
  unless Dir.exists?folder_path
    FileUtils.mkpath(folder_path)
  end
end

def delete_empty_folder(folder_path)
  if (Dir.entries(folder_path) - %w{ . .. }).empty?
    Dir.delete(folder_path)
    puts "empty directory #{folder_path} deleted"
  end
end

options = {
    # Expects to be in the bin/ sub-directory by default
    :path => File.dirname(File.dirname(__FILE__))
}

parser = OptionParser.new do |opt|
    opt.banner = 'usage: jekyll-page TITLE CATEGORY [FILENAME] [OPTIONS]'
    opt.separator ''
    opt.separator 'Options'
    opt.on('-e', '--edit', 'Edit the page') do |_|
        options[:edit] = true
    end
    opt.on('-l', '--link', 'Relink pages') do |_|
        options[:link] = true
    end
    opt.on('-p PATH', '--path PATH', String, 'Path to project root') do |path|
        options[:path] = path
    end
    opt.separator ''
end

parser.parse!

title = ARGV[0]
category = ARGV[1]
filename = ARGV[2]

# Resolve any relative links
BASE_DIR = File.expand_path(options[:path])
POSTS_DIR = "_posts"
PAGES_DIR_PATH = "#{BASE_DIR}/_pages"
POSTS_DIR_PATH = "#{BASE_DIR}/_posts"

# Ensure the _posts directory exists (we are in the correct directory)
unless Dir.exists?(POSTS_DIR_PATH)
  puts "#{POSTS_DIR_PATH} directory does not exists"
  exit
end

# Create _pages directory if it doesn't exist
ensure_folder_exists(PAGES_DIR_PATH)

if options[:link]
  # Relink all existing pages in the posts directory
  puts 'relinking all existing pages in the posts directory'
  Dir["#{BASE_DIR}/**/_posts/**/*.md"].each do |filePath|
    file_name = File.basename(filePath)
    nodate_name = file_name[/\d{4}-\d{2}-\d{2}-(?<date>.*)/, 'date']
    file_path = File.dirname(filePath)
    path_without_posts_dir = file_path.split('_posts')[0]

    # skip _posts directory in the root folder
    next if Pathname(path_without_posts_dir).cleanpath.eql?(Pathname(BASE_DIR).cleanpath)

    category_name = path_without_posts_dir.split('/')[-1]
    pages_sub_dir = File.join(PAGES_DIR_PATH, category_name)
    ensure_folder_exists(pages_sub_dir)
    if File.symlink?("#{pages_sub_dir}/#{nodate_name}")
      File.delete("#{pages_sub_dir}/#{nodate_name}")
    end
    relpath = File.path(Pathname(filePath).relative_path_from(Pathname(pages_sub_dir)))
    File.symlink(relpath, "#{pages_sub_dir}/#{nodate_name}")
  end

  # remove all empty _posts folders
  Dir["#{BASE_DIR}/**/_posts/**/"].each do |dirPath|
    category_folder = File.expand_path('..', Dir.new(dirPath))

    # skip _posts directory in the root folder
    next if Pathname(category_folder).cleanpath.eql?(Pathname(BASE_DIR).cleanpath)

    delete_empty_folder(dirPath)
    delete_empty_folder(category_folder)
  end

  # remove all orphaned symlinks from pages directory
  Dir["#{PAGES_DIR_PATH}/**/*.md"].each do |filePath|
    unless File.exists?("#{filePath}")
      File.delete("#{filePath}")
      puts "orphaned symlink #{filePath} deleted"
    end
  end

  # remove all empty folders in pages directory
  Dir["#{PAGES_DIR_PATH}/**/*/"].each do |dirPath|
    delete_empty_folder(dirPath)
  end
end

if not title or not category
    # This flag can be used by itself, exit silently if no arguments
    # are defined
    unless options[:link]
      puts parser
    end
    exit
end

unless filename
  filename = title.downcase.gsub(/[^a-z0-9\s]/, '').gsub(/\s+/, '-')
end

category_dir = category.downcase.gsub(/[^a-z0-9\s]/, '')

today=Date.today.strftime('%F')
now=DateTime.now.strftime('%F %T')

filepath_folder = "#{BASE_DIR}/#{category_dir}/#{POSTS_DIR}"
filepath = "#{filepath_folder}/#{today}-#{filename}.md"
symlink = "#{PAGES_DIR_PATH}/#{category_dir}/#{filename}.md"

if File.exists?(filepath)
    puts "File #{filepath} already exists"
    exit
end

content = <<END
---
title: \"#{title}\"
category: #{category}
date: #{now}
tags: []
---


END

ensure_folder_exists(filepath_folder)
File.open(filepath, 'w') do |file|
    file.puts content
end

ensure_folder_exists(File.join(PAGES_DIR_PATH, category_dir))
symlink_filepath = File.path(Pathname(filepath).relative_path_from(Pathname(File.join(PAGES_DIR_PATH, category_dir))))
File.symlink(File.path(symlink_filepath), symlink)

if options[:edit]
    unless ENV['EDITOR']
      puts 'No $EDITOR variable set'
      exit
    end
    puts ENV['EDITOR']
    exec("#{ENV['EDITOR']} #{symlink}")
end
